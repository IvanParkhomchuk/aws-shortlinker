org: ivanparkhomchuk
service: shortlinker

stages:
  default:
    params:
      usersTableName: "users-table-${sls:stage}"
      linksTableName: "links-table-${sls:stage}"

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-central-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
            - !Sub "${UsersTable.Arn}/index/*"
            - Fn::GetAtt: [LinksTable, Arn]
            - !Sub "${LinksTable.Arn}/index/UserIdIndex"
  environment:
    USERS_TABLE: ${param:usersTableName}
    LINKS_TABLE: ${param:linksTableName}
    ACCESS_TOKEN_SECRET: 4e5577b05140cda2a5ed5da4db3236c3ecd00a6605956ea9ff4e382532a40551b91655368eeeec04ee536e6584dbd6e624105bca778f5d646fb951c44665453f
    REFRESH_TOKEN_SECRET: b9628691487e0c180b03cc72704bc8c1e6c7b359f8f3320b247c6fd0407d3d3e403833cba36065f4a01acd63d3b869ba4741324bc2823caa2d973eb93f0245ce

functions:
  middleware:
    handler: src/auth/middleware.handler
  signup:
    handler: src/auth/signup.handler
    events:
      - http:
          path: signup
          method: post
  login:
    handler: src/auth/login.handler
    events:
      - http:
          path: login
          method: post
  refresh:
    handler: src/auth/refresh.handler
    events:
      - http:
          path: refresh
          method: post
  createLink:
    handler: src/links/createLink.handler
    events:
      - http:
          path: createLink
          method: post
          authorizer:
            name: middleware
            type: TOKEN
            identitySource: method.request.header.Authorization
  listLinks:
    handler: src/links/listLinks.handler
    events:
      - http:
          path: listLinks
          method: get
          authorizer:
            name: middleware
            type: TOKEN
            identitySource: method.request.header.Authorization
  deactivateLink:
    handler: src/links/deactivateLink.handler
    events:
      - http:
          path: deactivateLink
          method: post
          authorizer:
            name: middleware
            type: TOKEN
            identitySource: method.request.header.Authorization

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:usersTableName}
    LinksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: linkId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: linkId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:linksTableName}

plugins:
  - serverless-offline
